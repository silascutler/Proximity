#!/usr/bin/perl
#############################################################################################
#
#__________                     .__        .__  __
#\______   \_______  _______  __|__| _____ |__|/  |_ ___.__.
# |     ___/\_  __ \/  _ \  \/  /  |/     \|  \   __<   |  |
# |    |     |  | \(  <_> >    <|  |  Y Y  \  ||  |  \___  |
# |____|     |__|   \____/__/\_ \__|__|_|  /__||__|  / ____|
#                              \/        \/          \/
#
# proximity_reporter
#
# Copyright (C) 2012, Silas Cutler
#      <Silas.Cutler@BlackListThisDomain.com / SCutler@SecureWorks.com>
#
# This program is free software; you can redistribute it and/or modify it without restriction.
#      Any implimentation or profitting from this code requires the consent of the original 
#      author.  Any updates or impovements are not required to be shared with the author, but 
#      encoraged.  
#
# This software is provided as is.  The author or any associated parties are not liable for 
#      any use of this software or any damage that may occur from this software.
#
#############################################################################################
#	v0.7.5
#############################################################################################

use strict;
use warnings;
use DBI;
use Authen::SASL;
use MIME::Lite;
use Getopt::Long;
use Config::Simple;


my $current_Time = time;
my $report = "";

my $config = new Config::Simple(filename=>"/opt/Sinkhole/root/usr/bin/proximity_config");

my $database_host = $config->param("Database.database_host");
my $database_name = $config->param("Database.database_name");
my $database_user = $config->param("Database.database_user");
my $database_password = $config->param("Database.database_password");

my $sinkhole_IP_address = $config->param("SinkholeDetails.sinkhole_IP_address");

my $pcap_path = $config->param("Processing.pcap_path");
my $dns_path = $config->param("Processing.dns_path");

my $sender_address = $config->param("Mail.From_Address");
my $sender_address_password = $config->param("Mail.From_Address_Password");
my $mail_server = $config->param("Mail.Mail_Server");
my $mail_server_port = $config->param("Mail.Mail_Server_Port");



my $dbh = DBI->connect('dbi:mysql:'. $database_name,$database_user,$database_password) or die "Connection Error: $DBI::errstr\n";



#Input Handling.
my ($help,
	$processing_stats, 
	$search_filter_notes, 
	$search_filter,
	$search_filter_asn_number,
	$search_filter_asn_name,
	$search_recent, 
	$search_connection_asn_number, 
	$search_connection_asn_name,
	$search_pcap, 
	$count_only,
	$list_scanner, 
	$list_unmatched,
	$email,
	$print_asn,
	$email_from,
	$search_hostname,
	$search_hostname_rough,
	$search_hostname_only,
	$filter_status
	);
	
usage() if ( ( @ARGV < 1 or ! GetOptions(
    'help|?'									=>      \$help,
    'proc-stat|ps' 								=>		\$processing_stats,
    'search-filter|sf=s'		        		=> 		\$search_filter,
    'search-filter-notes|sfn=s' 				=>		\$search_filter_notes,
    'search-filter-asn|sfa=s'					=>		\$search_filter_asn_number,
    'search-filter-asn-name|sfan=s'				=>		\$search_filter_asn_name,
    
    'search-connection-asn|sca=s'				=> 		\$search_connection_asn_number,
    'search-connection-asn-name|scan=s'			=> 		\$search_connection_asn_name,
    
    'search-hostname|sh=s'				    	=>		\$search_hostname,
    'search-hostname-all|sha=s'			    	=>	    \$search_hostname_rough,
    'search-hostname-only|sho=s'				=>		\$search_hostname_only,
 
    'list-scanners|ls'			    			=> 		\$list_scanner,
    'list-unmatched|lu'							=>		\$list_unmatched,	
    'ip-pcap|pcap=s'							=> 		\$search_pcap, 
 
    'search-recent|r'							=> 		\$search_recent,
    'count|c'									=>		\$count_only,
    'email|e=s'									=>		\$email,
    'print-asn|pa' 								=>		\$print_asn,
    'efrom|from=s'								=>		\$email_from,
    'filter-status|fs'							=>		\$filter_status,

        )or defined $help  )  );

####################################################################################
################			Main								####################
####################################################################################

if ( defined($processing_stats))        		
	{ print_pcap_stats();}
if ( defined($filter_status))
	{ print_filter_stats(); }

if ( defined($search_filter_notes))           
			{ search_print(	search_filter_notes_matched_hosts($search_filter_notes), "Hosts based on Filter Notes /$search_filter_notes/") ;}
if ( defined($search_filter))		    
			{ search_print(	search_filter_id_matched_hosts($search_filter), "Hosts based on Filter ID- $search_filter");}
if ( defined($search_filter_asn_number))      
			{ search_print(	search_asn_number_matched_hosts($search_filter_asn_number), "Hosts in ASN - $search_filter_asn_number");}
if ( defined($search_filter_asn_name))		
			{ search_print(	search_asn_name_matched_hosts($search_filter_asn_name), "Hosts with ASN name like /$search_filter_asn_name/");}

if ( defined($search_connection_asn_number))    
			{ search_print(	search_connection_asn_number($search_connection_asn_number), "Hosts based on ASN Number - $search_connection_asn_number");}
if ( defined($search_connection_asn_name))      
			{ search_print(	search_connection_asn_name($search_connection_asn_name), "Hosts based on ASN Name /$search_connection_asn_name/");}

if (defined($search_hostname))
			{ search_print(	search_host_names($search_hostname), "Connections for hostname \'$search_hostname\'");}
if (defined($search_hostname_rough))
			{ search_print(	search_host_names_rough($search_hostname_rough), "Connections for hostname /$search_hostname_rough/");}
if (defined($search_hostname_only))
			{ search_print(	search_host_names_only($search_hostname_only), "Hostnames related to /$search_hostname_only/");}


if ( defined($search_pcap))						
			{ pcap_search_print(	pcap_search($search_pcap));}
if ( defined($list_scanner))					
			{ scanner_search_print(	search_scanner());}
if ( defined($list_unmatched))					
			{ unmatched_search_print(	search_unmatched());}
	
if ( defined($email))							
			{ email_report($email);}



####################################################################################
################			Subs								####################
####################################################################################
sub usage{
        print "Proximity - proximity-reporter 0.7.5 \n - Silas Cutler 2012\n\n";
        print "usage: ./$0
        
------------ Infection Search ------------------------
-search-filter                ( -sf   )       - Search for filter matches based on Filter ID
-search-filter-notes          ( -sfn  )       - Search for filter matches based on Filter Notes
-search-filter-asn            ( -sfa  )       - Search for filter matches based on ASN Number
-search-filter-asn-name       ( -sfan )       - Search for filter matches based on ASN Name

-count                        ( -c    )       - Only print counts (skip Address Listing)
-search-recent                ( -r    )       - Only print Results from the past 24
-print-asn                    ( -pa   )       - Print ASN Name
		
------------ Connection Search ------------------------
 -search-conn-asn              ( -sca  )       - Search for Connections based on ASN Number
 -search-conn-asn-name         ( -scan )       - Search for Connections based on ASN Name

 -count                        ( -c    )       - Only print counts (skip Address Listing)
 -search-recent                ( -r    )       - Only print Results from the past 24 hours
 -print-asn                    ( -pa   )       - Print ASN Name

------------ Hosts Search ----------------------------
 -search-hostname             ( -sh  )       - Search for IP addresses by Host Name 
 -search-hostname-all         ( -sha )       - Search for IP addresses by Host Name and Subdomains    
 -search-hostname-only        ( -sho )       - Search for hostnames by string    

 -count                        ( -c    )     - Only print counts (skip Address Listing)
 -search-recent                ( -r    )     - Only print Results from the past 24 hours
 -print-asn                    ( -pa   )     - Print ASN Name


------------ IP Searches -----------------------------
 -ip-pcap                      ( -pcap	)       - Search for PCAPs that contain an IP address

------------ List Information ------------------------
 -list-recent-connections
 -list-recent-infections

 -print-asn                    ( -pa   )       - Print ASN Name
		
------------ IP Group Information -------------------
 -list-scanners                ( -ls   )       - List all IP addresses that attempted to check for 
 -list-unmatched               ( -lu   )       - List any regular connecting IP that did not match a filter or scanner conditions		
 -print-asn                    ( -pa   )       - Print ASN Name

------------ System Information ---------------------
 -proc-stat                    ( -ps   )       - Processing Status	(All Time)
 -filter-status                ( -fs   )       - Print Filters Status			       
 -search-recent                ( -r    )       - Only print Results from the past 24 hours


 -help                         ( -h    )       - Prints this Help Message
";
        exit;
}




#### Pull list of Pcaps processed in the past 24 hours and assign to @daily_pcaps
sub pull_recent_pcaps{
	my @daily_pcaps = ();
	my $pcap_file = "";
	
	my $sql = 'SELECT pcap_file from pcap_stats ';
	$sql .= 'where (pcap_processed_time > unix_timestamp(now()) - 86400)' if (defined($search_recent));
	
    my $request_handle = $dbh->prepare($sql);
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$pcap_file );
    
    while($request_handle->fetch()){
    	push(@daily_pcaps,$pcap_file);
    }
    
    return \@daily_pcaps;
}

### Search filter_matched table by filter_id field
sub search_filter_id_matched_hosts{	
	my $search = shift;
	my $matched_ip = "";
	my %matched_hosts = ();
	my $pcap_ref = pull_recent_pcaps();
	
	my $sql = 'select source_ip  
		from filter_matches 
		left join filters 
		on filter_matches.filter_id = filters.filter_id where ((filter_matches.filter_id = ?  )';
	$sql .= ' && ( filter_matches.pcap_file = "' . join('" || filter_matches.pcap_file="' , @{$pcap_ref}) . '"))';
    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute($search);
    $request_handle->bind_columns(undef, \$matched_ip );
    while($request_handle->fetch()){
    	my $asn_name = asn_lookup($matched_ip);
    	$matched_hosts{$matched_ip} = $asn_name;
    }
    return \%matched_hosts;
}

### Search filter_matched table by filter_notes field
sub search_filter_notes_matched_hosts{	
	my $search = shift;
	my $matched_ip = "";
	my %matched_hosts = ();
	my $pcap_ref = pull_recent_pcaps();
	
	my $sql = 'select source_ip 
		from filter_matches 
		left join filters 
		on filter_matches.filter_id = filters.filter_id where ((filters.filter_note like "' . $search . '%" )';
	$sql .= ' && ( filter_matches.pcap_file = "' . join('" || filter_matches.pcap_file="' , @{$pcap_ref}) . '"))';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$matched_ip );
    while($request_handle->fetch()){
    	my $asn_name = asn_lookup($matched_ip);
    	$matched_hosts{$matched_ip} = $asn_name;
    }
    return \%matched_hosts;
}
### Search filter_matched table by connection_log ASN number field
sub search_asn_number_matched_hosts{	
	my $search = shift;
	my $matched_ip = "";
	my %matched_hosts = ();
	my $pcap_ref = pull_recent_pcaps();
	
	my $sql = 'select filter_matches.source_ip  
		from filter_matches 
		left join connection_log 
		on filter_matches.source_ip = connection_log.source_ip where ((connection_log.asn = ?  )';
	$sql .= ' && ( connection_log.pcap_file = "' . join('" || connection_log.pcap_file="' , @{$pcap_ref}) . '"))';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute($search);
    $request_handle->bind_columns(undef, \$matched_ip );
    while($request_handle->fetch()){
    	my $asn_name = asn_lookup($matched_ip);
    	$matched_hosts{$matched_ip} = $asn_name;
    }
    return \%matched_hosts;
}
sub search_asn_name_matched_hosts{	
	my $search = shift;
	my $matched_ip = "";
	
	my %matched_hosts = ();
	my $pcap_ref = pull_recent_pcaps();
	
	my $sql = 'select filter_matches.source_ip  
		from filter_matches 
		left join connection_log 
		on filter_matches.source_ip = connection_log.source_ip where ((connection_log.asn_name like "%' . $search . '%"  )';
	$sql .= ' && ( filter_matches.pcap_file = "' . join('" || filter_matches.pcap_file="' , @{$pcap_ref}) . '"))';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$matched_ip );
    while($request_handle->fetch()){
    	my $asn_name = asn_lookup($matched_ip);
    	$matched_hosts{$matched_ip} = $asn_name;    
    }
    return \%matched_hosts;
}


sub asn_lookup{	
	my $ip_address = shift;
	my $asn_name = "";

	my $sql = 'select asn_name from connection_log where (source_ip = ? and asn_name is not null) limit 1';
    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute($ip_address);
    $request_handle->bind_columns(undef, \$asn_name );
    $request_handle->fetch();

    if (!defined($asn_name)){
	    	return "NULL:";
    }
    return $asn_name;
    

}
sub search_connection_asn_number{	
	my $asn_number = shift;
	my $connection_ip = "";

	my %connections = ();
	my $pcap_ref = pull_recent_pcaps();

	my $sql = 'select source_ip from connection_log where ( ';
	$sql .= '( pcap_file = "' . join('" || pcap_file="' , @{$pcap_ref}) . '") && ';
	$sql .= '( asn = ? ))';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute($asn_number);
    $request_handle->bind_columns(undef, \$connection_ip );
    while($request_handle->fetch()){
    	my $asn_name = asn_lookup($connection_ip);
    	$connections{$connection_ip} = $asn_name;
    }
    return \%connections;    

}

sub search_connection_asn_name{	
	my $asn_name = shift;
	my $connection_ip = "";

	my %connections = ();
	my $pcap_ref = pull_recent_pcaps();

	my $sql = 'select source_ip from connection_log where ( ';
	$sql .= '( pcap_file = "' . join('" || pcap_file="' , @{$pcap_ref}) . '") && ';
	$sql .= '( asn_name like "%' . $asn_name . '%"))';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$connection_ip );
    while($request_handle->fetch()){
    	my $asn_name = asn_lookup($connection_ip);
    	$connections{$connection_ip} = $asn_name;
    }
    return \%connections;    

}


sub search_top_domains{	
	my $domain_name = "";
	my $count = "";
	my $index = 0;
	my %connections = ();
	my $pcap_ref = pull_recent_pcaps();

	my $sql = 'select hostname , count(source_ip) as total_count from http_hosts where (';
	$sql .= '( pcap_file = "' . join('" || pcap_file="' , @{$pcap_ref}) . '")) ';
	$sql .= ' group by hostname order by total_count desc limit 15';

    my $request_handle = $dbh->prepare($sql);
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$domain_name , \$count);
    while($request_handle->fetch()){
    	$connections{$index}{$domain_name} = $count;
    	$index++;
    }
    return \%connections;    

}

sub search_top_ports{	
	my $port = "";
	my $count = "";
	my $index = 0;
	my %connections = ();
	my $pcap_ref = pull_recent_pcaps();

	my $sql = 'select destination_port , count(source_ip) as total_count from connection_log where (';
	$sql .= '( pcap_file = "' . join('" || pcap_file="' , @{$pcap_ref}) . '")) ';
	$sql .= ' group by destination_port order by total_count desc limit 15';

    my $request_handle = $dbh->prepare($sql);
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$port , \$count);
    while($request_handle->fetch()){
    	$connections{$index}{$port} = $count;
    	$index++;
    }
    return \%connections;    

}

sub search_asn_summary{	
	my ($unmatched_ip, $ports , $count, $asn_name) = ();

	my %connections = ();
	my $pcap_ref = pull_recent_pcaps();
	
	my $sql = 'SELECT source_ip, count(destination_port) as occurance, sum(count) as counter 
					FROM connection_log WHERE ';
		$sql .= '( pcap_file = "' . join('" || pcap_file="' , @{$pcap_ref}) . '") ';
		$sql .= 'GROUP BY source_ip';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$unmatched_ip, \$ports ,\$count);
    while($request_handle->fetch()){
    	my $asn_name = asn_lookup($unmatched_ip);
    	$connections{$asn_name}{$unmatched_ip}=$count if ( ($ports < 4) && ($count > 500) && ($asn_name =~ /\w/));
    }
    return \%connections;   



}

sub search_host_names{	
	my $search = shift;
	my $source_ip = ();

	my %connections = ();
	my $pcap_ref = pull_recent_pcaps();
	
	my $sql = 'SELECT source_ip FROM http_hosts WHERE (( hostname = "' . $search . '") &&';
		$sql .= '( pcap_file = "' . join('" || pcap_file="' , @{$pcap_ref}) . '") )';
		$sql .= 'GROUP BY source_ip';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$source_ip );
    while($request_handle->fetch()){
    	my $asn_name = asn_lookup($source_ip);
    	$connections{$source_ip} = $asn_name;
    }
    return \%connections;   
}

sub search_host_names_rough{	
	my $search = shift;
	my $source_ip = ();

	my %connections = ();
	my $pcap_ref = pull_recent_pcaps();
	
	my $sql = 'SELECT source_ip FROM http_hosts WHERE (( hostname like "%' . $search . '%") &&';
		$sql .= '( pcap_file = "' . join('" || pcap_file="' , @{$pcap_ref}) . '") )';
		$sql .= 'GROUP BY source_ip';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$source_ip );
    while($request_handle->fetch()){
    	my $asn_name = asn_lookup($source_ip);
    	$connections{$source_ip} = $asn_name;
    }
    return \%connections;   
}

sub search_host_names_only{	
	my $search = shift;
	my $source_ip = ();

	my %connections = ();
	my $pcap_ref = pull_recent_pcaps();
	
	my $sql = 'SELECT hostname FROM http_hosts WHERE (( hostname like "%' . $search . '%") &&';
		$sql .= '( pcap_file = "' . join('" || pcap_file="' , @{$pcap_ref}) . '") )';
		$sql .= 'GROUP BY hostname';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$source_ip );
    while($request_handle->fetch()){
    	$connections{$source_ip}++;
    }
    return \%connections;   
}


sub search_print{
	my $search_ref = shift;
	my $description = shift;
	
	$description .= " ( From the past 24 hours ) " if (defined($search_recent));
	
	print "$description: \n";
	$report .="$description: \n" if (defined($email));
	
	if (!defined($count_only)){	
		foreach( keys %{$search_ref} ){
			if (defined($print_asn)){
				print " - $_  ( ${$search_ref}{$_} )\n";
				$report .= " - $_  ( ${$search_ref}{$_} )\n" if (defined($email));
			} else{
				print " - $_\n";
				$report .= " - $_\n" if (defined($email));
			}
		}
	}
	 
	print "Total -- " . keys (%{$search_ref}) . "\n";
	$report .= "Total -- " . keys (%{$search_ref}) . "\n" if (defined($email));
}


sub search_unique_ports{	
	my $dst_port = "";

	my %ports = ();
	my $pcap_ref = pull_recent_pcaps();

	my $sql = 'select distinct destination_port from connection_log where ( ';
	$sql .= '( pcap_file = "' . join('" || pcap_file="' , @{$pcap_ref}) . '"))';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$dst_port );
    while($request_handle->fetch()){
    	$ports{$dst_port}++;
    }
    return \%ports;    

}

sub search_unique_ip_adresses{	
	my $source_ip = "";
	my $occurance = "";
	my %connections = ();
	my $index = 0 ;
	my $pcap_ref = pull_recent_pcaps();
	
	my $sql = 'select source_ip, sum(count) as occ from connection_log where ( ';
	$sql .= '( pcap_file = "' . join('" || pcap_file="' , @{$pcap_ref}) . '")) ';
	$sql .= ' group by source_ip order by occ desc';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$source_ip, \$occurance);
    while($request_handle->fetch()){
    	$connections{$index}{$source_ip} = $occurance;
    	$index++;
    }
    return \%connections;    

}

sub search_scanner{	
	my $scanner_ip 	= "";
	my $occurance 	= "";
	
	my %connections = ();
	my $pcap_ref = pull_recent_pcaps();
	
	my $sql = 'SELECT source_ip, count(destination_port) as occurance from connection_log where ';
	$sql .= '( pcap_file = "' . join('" || pcap_file="' , @{$pcap_ref}) . '")';
	$sql .= '  group by source_ip order by occurance';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$scanner_ip, \$occurance );
    while($request_handle->fetch()){
    	my $asn_name = asn_lookup($scanner_ip);
    	$connections{$scanner_ip} = $occurance if ($occurance > 4);
    }
    
    
    return \%connections;    

}

sub scanner_search_print{
	my $scanner_ref = shift();
	
	print "Scanner Hosts: (Hosts which hit more than 4 ports) \n";
	$report .="Scanner Hosts: (Hosts which hit more than 4 ports) \n" if (defined($email));
	
	if (!defined($count_only)){	
		foreach( keys %{$scanner_ref} ){
			print " - $_ \n";	
			$report .= " - $_\n" if (defined($email));
		} 
	}
	print "Total -- " . keys (%{$scanner_ref}) . "\n";
	$report .= "Total -- " . keys (%{$scanner_ref}) . "\n" if (defined($email));
	$report .="\n" if (defined($email));

}

sub search_unmatched{	
	my ($unmatched_ip, $ports , $count ) = ();

	my %connections = ();
	my $pcap_ref = pull_recent_pcaps();
	
	my $sql = 'SELECT connection_log.source_ip , count(connection_log.destination_port) as occurance, sum(connection_log.count) as counter 
					FROM connection_log 
					LEFT JOIN filter_matches 
					ON connection_log.source_ip = filter_matches.source_ip 
					WHERE (filter_matches.source_ip IS null &&';
		$sql .= '( connection_log.pcap_file = "' . join('" || connection_log.pcap_file="' , @{$pcap_ref}) . '"))';
		$sql .= 'GROUP BY source_ip';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$unmatched_ip, \$ports ,\$count);
    while($request_handle->fetch()){
    	my $asn_name = asn_lookup($unmatched_ip);
    	$connections{$unmatched_ip}=$asn_name if ( ($ports < 4) && ($count > 30) );
    }
    return \%connections;    

}

sub unmatched_search_print{
	my $scanner_ref = shift();
	
	print "Unmatched Hosts: (Hosts which did not match a filter and not classify as a scanner)  \n";
	$report .="Unmatched Hosts: (Hosts which did not match a filter and not classify as a scanner)  \n" if (defined($email));

	if (!defined($count_only)){	
		foreach( keys %{$scanner_ref} ){
		
			print " - $_\n";	
			$report .= " - $_\n" if (defined($email));
		} 
	}
	print "Total -- " . keys (%{$scanner_ref}) . "\n";
	$report .= "Total -- " . keys (%{$scanner_ref}) . "\n" if (defined($email));
	$report .="\n" if (defined($email));

}

sub pcap_search{
	my $ip_address = shift;
	my $pcap_file = "";

	my %pcap_files = ();

	my $sql = 'select pcap_file from connection_log where ( source_ip = ? )';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute($ip_address);
    $request_handle->bind_columns(undef, \$pcap_file );
    while($request_handle->fetch()){
    	$pcap_files{$pcap_file}++;
    }
    return \%pcap_files;    	
	
	
}

sub filter_count {
	my $count = 0;
	my $filter_id = shift;
	
	my %connections = ();
	my $pcap_ref = pull_recent_pcaps();
	
	my $sql = 'select count(distinct source_ip) from filter_matches
					WHERE (filter_id = ? && ';
		$sql .= '( pcap_file = "' . join('" ||pcap_file="' , @{$pcap_ref}) . '"))';

    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute($filter_id);
    $request_handle->bind_columns(undef, \$count);
    $request_handle->fetch();
    return $count;   
	
}

sub pcap_search_print{
	my $pcap_ref = shift();
	
	print "Pcap Files with $search_pcap: \n";
	$report .= "Pcap Files with $$search_pcap: \n" if (defined($email));
	foreach( keys %{$pcap_ref} ){
		print " - $_\n";
		$report .= " - $_\n" if (defined($email));
	} 
	print "Total -- " . keys (%{$pcap_ref}) . "\n";
	$report .= "Total -- " . keys (%{$pcap_ref}) . "\n" if (defined($email));
	$report .="\n" if (defined($email));

}




sub print_pcap_stats{
	my %output = ();
	if (defined($search_recent)){
		print "Sinkhole Statistics from the past 24 hours:\n\n";
		$report .= "Sinkhole Statistics from the past 24 hours:\n\n" if (defined($email));
	}else{
		print "Sinkhole Statistics:\n\n";
		$report .= "Sinkhole Statistics:\n\n"  if (defined($email));
	}

	
	my $daily_pcaps = pull_recent_pcaps();
	print " - [*] Processed ". $#{$daily_pcaps} . " files\n"; 
	$report .= " - [*] Processed ". $#{$daily_pcaps} . " files\n" if (defined($email));
	
	my $connections_ref = search_connection_asn_name("");
    print " - [*] ". keys (%{$connections_ref}) . " Inbound Connections\n";
    $report .= " - [*] ". keys (%{$connections_ref}) . " Inbound Connections\n" if (defined($email));
    
    my $uniq_ports = search_unique_ports();
    print " - [*] ". keys (%{$uniq_ports}) . " Unique Ports\n";
    $report .= " - [*] ". keys (%{$uniq_ports}) . " Unique Ports\n" if (defined($email));
    
    my $uniq_addresses = search_unique_ip_adresses();
    print " - [*] ". keys (%{$uniq_addresses}) . " Unique IP Addresses\n";
    $report .= " - [*] ". keys (%{$uniq_addresses}) . " Unique IP Addresses\n" if (defined($email));

	if (!defined($list_unmatched)){	
		my $unmatched_addresses = search_unmatched();
		print " - [*] ". keys (%{$unmatched_addresses}) . " Unmatched IP Addresses\n";
		$report .= " - [*] ". keys (%{$unmatched_addresses}) . " Unmatched IP Addresses\n" if (defined($email));
	}
	
	
	print "\nTop 15 Talkers ( IP / Count):\n";
	$report .= "\nTop 15 Talkers ( IP / Count):\n";
	my $top_talkers = search_unique_ip_adresses();
	foreach my $index_key ( sort { $a <=> $b }  keys %{$top_talkers} ) {
		foreach my $source_ip (keys %{${$top_talkers}{$index_key}} ){
				print "$source_ip (" . ${${$top_talkers}{$index_key}}{$source_ip} . ")\n";
				$report .= "$source_ip (" . ${${$top_talkers}{$index_key}}{$source_ip} . ")\n" if (defined($email));
			
		}
		
		if ($index_key == 15 ){	 last;	}
		
	}	
	
	
	print "\nTop 15 Hostnames from HTTP Requests ( Domain Name / Count):\n";
	$report .= "\nTop 15 Hostnames from HTTP Requests ( Domain Name / Count):\n";

	my $top_talker_domains = search_top_domains();	
	foreach my $index_key ( sort { $a <=> $b }  keys %{$top_talker_domains} ) {
		foreach my $domain_name (keys %{${$top_talker_domains}{$index_key}} ){
				print "$domain_name (" . ${${$top_talker_domains}{$index_key}}{$domain_name} . ")\n";
				$report .= "$domain_name (" . ${${$top_talker_domains}{$index_key}}{$domain_name} . ")\n" if (defined($email));

		}
		
		if ($index_key == 15 ){	 last;	}
		
	}		
   
	print "\nTop 15 Ports from Inbound Requests ( Domain Name / Count):\n";
	$report .= "\nTop 15 Ports from Inbound Requests ( Domain Name / Count):\n";

	my $top_conn_ports = search_top_ports();	
	foreach my $index_key ( sort { $a <=> $b }  keys %{$top_conn_ports} ) {
		foreach my $port_number (keys %{${$top_conn_ports}{$index_key}} ){
				print "$port_number (" . ${${$top_conn_ports}{$index_key}}{$port_number} . ")\n";
				$report .= "$port_number (" . ${${$top_conn_ports}{$index_key}}{$port_number} . ")\n" if (defined($email));

		}
		
		if ($index_key == 15 ){	 last;	}
		
	}
 
	print "\n";
	$report .="\n" if (defined($email));
	
}

sub print_filter_stats{

	my ($filter_id, $filter_note) = "";

	print "\nFilter Counts\n";
	$report .= "\nTop 15 Talkers ( IP / Count):\n";
	
	
	my $sql = 'select filter_id, filter_note from filters where filter_status = "active";';
    my $request_handle = $dbh->prepare($sql);
    	
    $request_handle->execute();
    $request_handle->bind_columns(undef, \$filter_id, \$filter_note );
    while($request_handle->fetch()){
    	my $filter_count = filter_count($filter_id);
    	print " [$filter_id] $filter_note ( $filter_count )\n";	
    	$report .= " [$filter_id] $filter_note ( $filter_count )\n";	
    }

	print "\n";
	$report .="\n" if (defined($email));
	
	
}

## Email Alering
sub email_report{
	my $date = `date +%Y-%m-%d --date="1 days ago"`;
	chomp($date);
	$report =~ s/\n/\n/g;
    my $output ="";
    my $from = $sender_address;
    
    my @to = (shift);
    my $subject= "Proximity Sinkhole Status Report ( $date ) DEV";

    if (defined($email_from)){
		$from	 = $email_from;  
	}

    my $message = qq{
Proximity Sinkhole Status Report for $date  
$report

	};

	my $asn_summary_ref = search_asn_summary();
	$message .= "\nRepeated Connection Attempts by ASN [Total: " . keys ( %{$asn_summary_ref} ) . "] ( ASN / Count):\n";

	foreach my $key ( sort keys %{$asn_summary_ref} ) {
			$message .= " - $key  (IP Count - " . keys ( ${$asn_summary_ref}{$key} ) . ")\n";
	}    
    $message .= "\n\n\n";

    MIME::Lite->send('smtp',$mail_server . ':' . $mail_server_port ,AuthUser=>$sender_address, AuthPass=>$sender_address_password);
    foreach my $recipient(@to){
            my $msg = MIME::Lite->new(
                    From     => $sender_address,
                    To       => $recipient,
                    Subject  => $subject,
                    Data     => $message,
					Type	 => 'Text/text',
            );

            
            #if (defined($count_only)){	
				
				## Filter Matched IPs
				print "Attaching All IPs\n";
				my $uniq_ip_addresses = "All Inbound IP addresses connecting to Sinkhole ([Packet Count] IP / (ASN) ) \n" . "-"x20 . "\n";
				my $ip_ref = search_unique_ip_adresses();
				foreach my $index_key ( sort { $a <=> $b }  keys %{$ip_ref} ) {
					foreach my $source_ip (keys %{${$ip_ref}{$index_key}} ){
					    	my $asn_name = asn_lookup($source_ip);

							$uniq_ip_addresses .= "[${${$ip_ref}{$index_key}}{$source_ip}] $source_ip ( $asn_name  )\n";


					}							
				}	
				

            	
            	$msg->attach (
				Type => 'Text/Text',
				Filename => 'uniq_ips.txt',
				Data => $uniq_ip_addresses,
				Disposition => 'attachment'
				) or die "Error adding the text message part: $!\n";
				
            #}
            $msg->send or die "Message Send Faied";
            print "Email Sent - $subject /$recipient !\n";
    }
}














####//Fin



