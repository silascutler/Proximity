#!/usr/bin/perl
#############################################################################################
#
#__________                     .__        .__  __
#\______   \_______  _______  __|__| _____ |__|/  |_ ___.__.
# |     ___/\_  __ \/  _ \  \/  /  |/     \|  \   __<   |  |
# |    |     |  | \(  <_> >    <|  |  Y Y  \  ||  |  \___  |
# |____|     |__|   \____/__/\_ \__|__|_|  /__||__|  / ____|
#                              \/        \/          \/
#
# proximity_reporter
#
# Copyright (C) 2013, Silas Cutler
#      <Silas.Cutler@BlackListThisDomain.com / SCutler@SecureWorks.com>
#
# This program is free software; you can redistribute it and/or modify it without restriction.
#      Any implimentation or profitting from this code requires the consent of the original 
#      author.  Any updates or impovements are not required to be shared with the author, but 
#      encoraged.  
#
# This software is provided as is.  The author or any associated parties are not liable for 
#      any use of this software or any damage that may occur from this software.
#
#############################################################################################
#	v0.7
#############################################################################################

use strict;
use warnings;
use DBI;
use Authen::SASL;
use MIME::Lite;
use Getopt::Long;
use Net::Pcap;
use NetPacket::Ethernet;
use NetPacket::IP;
use NetPacket::TCP;
use NetPacket::UDP;

require 'etc/config.pm';
require 'lib/functions.pm';
require 'lib/db.pm';


#Enable functionality & Paths
our ($proc_pcap_proc_enabled, $proc_pcap_path);
our ($proc_dns_proc_enabled, $proc_dns_path);
our ($user_pcap_path, $user_dns_path);

#Sinkhole Attributes
our ($var_sinkhole_address);

#Database Functions & DB Connection
our ($dbh );

our ( $mail_From_Address, $mail_From_Address_Password, $mail_Mail_Server, $mail_Mail_Server_Port, $mail_report_address );




my $current_Time = time;
my $report = "";
my $err = "";
my $debug = 0;
my $search_recent = "true";

my $date = `date +%Y-%m-%d`;
chomp($date);

#############################################################################################
#### Main
#############################################################################################
pull_recent_pcaps();
print "Processing Packets\n";
my $unmatched_ip_ref = search_unmatched_anomaly();
	print "Total Unmatched --> " . keys (%{$unmatched_ip_ref}) . "\n";
	$report .= "Total Unmatched --> " . keys (%{$unmatched_ip_ref}) . "\n";
	foreach my $unmatched_ip (keys %{$unmatched_ip_ref} ){
		#print "Unmatched - > $unmatched_ip (". ${$unmatched_ip_ref}{$unmatched_ip}.  ")\n";
		eval{
			my ( $packet) = pull_packet_raw($unmatched_ip);
			$report .= "Unmatched - > $unmatched_ip  (". ${$unmatched_ip_ref}{$unmatched_ip}.  ")";
			#$packet =~ s/\n\n/\n/g;
			$report .= $packet;
			
			$report .=  '-'x25 . "\n"; 
		};
		if ($@){
			$report .= "Problem with pulling packet for $unmatched_ip\n";
			$report .= '-'x40 . "\n"; 
		}
	}

print "Finished Processing Packets\n";
email_report($recipient, $report);




#############################################################################################
#### Subs
#############################################################################################






sub email_report{
    my @to = (shift);
	my $message_body = shift;
    my $subject= "Proximity Anomaly Report [ $date ] DEV";
    my $message = qq{
Proximity Anomaly Report for $date  
$message_body

	};
	

	MIME::Lite->send('smtp',$mail_Mail_Server . ':' . $mail_Mail_Server_Port ,AuthUser=>$mail_From_Address, AuthPass=>$mail_From_Address_Password);
		foreach my $recipient(@to){
			my $msg = MIME::Lite->new(
	    	    From     => $mail_From_Address,
	    	    To       => $mail_report_address,
	    	    Subject  => $subject,
	    	    Data     => $message,
	    	    Type	 => 'Text/text',
	    	);
	
	
	    $msg->send or die "Message Send Faied";
	    print "Email Sent - $subject /$mail_report_address !\n";
	}
}
